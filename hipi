#!/usr/bin/env ruby
# frozen_string_literal: true

# High Precision Pi Formatter
#
# A utility script for computing and formatting π (pi) with arbitrary precision.
#
# This script calculates π using Ruby's BigDecimal and BigMath libraries, then
# formats the result into a hierarchical visual structure for better readability.
#
# The formatting follows a three-level hierarchy:
#   1. Digits → Individual digits grouped together (--group-size)
#   2. Blocks → Groups arranged into blocks (--block-cols × --block-rows)
#   3. Grid → Blocks arranged in a grid layout (--grid-cols × --grid-rows)
#
# Format Hierarchy Visualization:
#
# Grid (--grid-cols × --grid-rows)
# ┌────────────────┐ ┌────────────────┐
# │    Block 1     │ │    Block 2     │
# │ g1 g2 g3 g4 g5 │ │ g1 g2 g3 g4 g5 │
# │ g6 g7 g8 g9 g0 │ │ g6 g7 g8 g9 g0 │
# └────────────────┘ └────────────────┘
# ┌────────────────┐ ┌────────────────┐
# │    Block 3     │ │    Block 4     │
# │ g1 g2 g3 g4 g5 │ │ g1 g2 g3 g4 g5 │
# │ g6 g7 g8 g9 g0 │ │ g6 g7 g8 g9 g0 │
# └────────────────┘ └────────────────┘
#
# Block Structure (--block-cols × --block-rows):
#   g1 g2 g3 g4 g5    ← Groups per row (block_cols)
#   g6 g7 g8 g9 g0    ← Multiple rows (block_rows)
#
# Group (--group-size):
#   g1 = "14"         ← Digits per group
#
# The total precision is calculated as:
#   group_size × block_cols × block_rows × grid_cols × grid_rows
#
# @example Basic usage with default settings
#   $ hipi
#
# @example Simple 2x2 grid layout
#   $ hipi -r 2 -c 2
#   ======================================================
#   Tabular Representation of π (pi) to 200 decimal places
#   ======================================================
#
#   14 15 92 65 35   82 14 80 86 51
#   89 79 32 38 46   32 82 30 66 47
#   26 43 38 32 79   09 38 44 60 95
#   50 28 84 19 71   50 58 22 31 72
#   69 39 93 75 10   53 59 40 81 28
#
#   58 20 97 49 44   48 11 17 45 02
#   59 23 07 81 64   84 10 27 01 93
#   06 28 62 08 99   85 21 10 55 59
#   86 28 03 48 25   64 46 22 94 89
#   34 21 17 06 79   54 93 03 81 96
#
# @example Customize formatting with 3 digits per group, 4 columns per block
#   $ hipi --group-size 3 --block-cols 4
#
# @example Customize digit grouping
#   $ hipi -g 3 --bc 4
#
# @example Grid layout customization
#   $ hipi -c 3 -r 2 --cs 3
#
# Format Hierarchy:
# 1. Digits: Individual digits grouped by size (-g, --group-size)
# 2. Blocks: Groups arranged in columns/rows (--bc/--br)
# 3. Grid: Blocks arranged in columns/rows (-c/-r)
#
# Spacing Options:
# - Between groups: --gs (group_spacing)
# - Between lines: --ls (line_spacing)
# - Between columns: --cs (col_spacing)
# - Between rows: --rs (row_spacing)
#
# @version 1.3.2

require 'bigdecimal'
require 'bigdecimal/math'
require 'optparse'

VERSION = '1.3.2'

# Holds configuration options for Pi calculation and formatting.
# All parameters must be positive integers.
# @attr [Integer] group_size Number of digits per group
# @attr [Integer] block_cols Number of digit groups in each column within a block
# @attr [Integer] block_rows Number of rows in each block
# @attr [Integer] grid_cols Number of columns in the output grid
# @attr [Integer] grid_rows Number of rows in the output grid
# @attr [Integer] group_spacing Number of spaces between digit groups
# @attr [Integer] line_spacing Number of empty lines between rows within blocks
# @attr [Integer] col_spacing Number of spaces between columns in the grid
# @attr [Integer] row_spacing Number of empty lines between grid rows
PiOptions = Struct.new(:group_size, :block_cols,
                       :block_rows, :grid_cols, :grid_rows,
                       :group_spacing, :line_spacing,
                       :col_spacing, :row_spacing,
                       keyword_init: true)

# Computes and formats π with high precision using BigDecimal
class HighPrecisionPiFormatter
  # @return [String] The calculated value of π as a string
  attr_reader :pi

  # @return [PiOptions] The formatting options
  attr_reader :options

  # @param options [PiOptions] A struct containing all formatting options
  def initialize(options)
    @options = options
    @pi = calculate
  end

  # Formats π according to the defined options and returns the complete output
  # including the header
  # @return [String] The formatted π digits with header
  def format_with_header
    header = generate_header
    digits = @pi.sub(/^3\./, '')
    formatted_digits = format_digit_groups(digits)

    [header, formatted_digits].join("\n\n")
  end

  # @return [String] The formatted π digits according to the defined options
  def format
    digits = @pi.sub(/^3\./, '')
    format_digit_groups(digits)
  end

  private

  # Generates a header displaying information about the calculation
  # @return [String] A formatted header
  def generate_header
    title = "Tabular Representation of π (pi) to #{calculate_precision} decimal places"
    line = '=' * title.length
    [line, title, line].join("\n")
  end

  # Calculates Pi to the required precision plus a buffer for rounding safety.
  # @return [String] Pi as a string, including "3." and the specified number of decimal places.
  def calculate
    # Calculate precision based on the display parameters
    precision = calculate_precision
    # Calculate with a buffer and truncate to the exact precision required
    BigMath.PI(precision + 10).to_s('F')[0..precision + 1]
  end

  # Calculate required precision based on display parameters
  # @return [Integer] The calculated precision
  def calculate_precision
    @options.group_size * @options.block_cols * @options.block_rows * @options.grid_cols * @options.grid_rows
  end

  # @param digits [String] The decimal digits of π (e.g., "14159...")
  # @return [String] The fully formatted string, or an error message
  def format_digit_groups(digits)
    return error_message unless valid_parameters?

    # Group digits using efficient scan method
    digit_groups = digits.scan(/.{1,#{@options.group_size}}/)
                         .map { |group| group.ljust(@options.group_size) }

    # Calculate formatting dimensions
    groups_per_line = @options.block_cols * @options.grid_cols
    groups_per_block = groups_per_line * @options.block_rows

    # Format the digits into blocks, rows, and segments
    format_blocks(digit_groups, groups_per_line, groups_per_block)
  end

  # Validates that all formatting parameters are positive
  # @return [Boolean] whether all formatting parameters are positive
  def valid_parameters?
    @options.group_size.positive? &&
      @options.block_cols.positive? &&
      @options.grid_cols.positive? &&
      @options.block_rows.positive?
  end

  # Generates an appropriate error message for invalid parameters
  # @return [String] error message for invalid parameters
  def error_message
    return 'Error: Group size must be positive.' unless @options.group_size.positive?

    'Error: Formatting parameters must be positive.'
  end

  # Formats the digit groups into a hierarchical structure of blocks, rows, and columns
  #
  # Formatting Algorithm:
  # 1. Group digits into blocks based on the specified dimensions
  # 2. Divide digit groups into lines based on the block_cols parameter
  # 3. Segment these lines into columns for the grid layout
  # 4. Transpose to ensure proper vertical alignment
  # 5. Arrange blocks with appropriate spacing (both horizontal and vertical)
  # 6. Add extra spacing between grid columns for visual separation
  #
  # @param digit_groups [Array<String>] Groups of digits to format
  # @param groups_per_line [Integer] Number of groups in each line
  # @param groups_per_block [Integer] Number of groups in each block
  # @return [String] Fully formatted string with proper spacing and line breaks
  def format_blocks(digit_groups, groups_per_line, groups_per_block)
    # Step 1: Divide the digit groups into lines based on block columns
    sliced_by_lines = digit_groups.each_slice(@options.block_cols).to_a

    # Step 2: Segment the lines into columns for horizontal arrangement
    segmented_columns = sliced_by_lines.each_slice(sliced_by_lines.size / @options.grid_cols).to_a

    # Step 3: Transpose and flatten to get the correct reading order
    digit_groups = segmented_columns.empty? ? [] : segmented_columns.transpose.flatten

    blocks = []
    digit_groups.each_slice(groups_per_block) do |block_chunk|
      # Step 4: Pad the last block with spaces if needed for consistent formatting
      if block_chunk.size < groups_per_block
        block_chunk = block_chunk.dup.fill(' ' * @options.group_size, block_chunk.size...groups_per_block)
      end

      # Step 5: Format rows within each block
      rows = block_chunk.each_slice(groups_per_line).to_a
      formatted_rows = format_rows(rows)
      blocks << formatted_rows.join("\n")
    end

    # Step 6: Join blocks with appropriate row spacing
    row_separator = "\n" * (@options.row_spacing + 1)
    blocks.join(row_separator)
  end

  # Formats each row of digit groups with proper spacing
  # @param rows [Array<Array<String>>] Rows of digit groups
  # @return [Array<String>] Formatted rows with proper spacing
  def format_rows(rows)
    formatted_rows = rows.map do |row|
      if @options.grid_cols > 1
        format_row_with_segments(row)
      else
        row.join(' ' * @options.group_spacing)
      end
    end

    # Add line spacing between rows if requested
    if @options.line_spacing.positive?
      result = []
      formatted_rows.each_with_index do |row, index|
        result << row
        result.concat([' ' * 5] * @options.line_spacing) unless index == formatted_rows.size - 1
      end
      result
    else
      formatted_rows
    end
  end

  # Formats a row with additional segment spacing when multiple columns are used
  # @param row [Array<String>] A row of digit groups
  # @return [String] Formatted row with segment spacing
  def format_row_with_segments(row)
    row.each_slice(@options.block_cols)
       .map { |segment| segment.join(' ' * @options.group_spacing) }
       .join(' ' * @options.col_spacing)
  end
end

# Parses command-line options and returns configuration
# @return [PiOptions] An object containing the parsed command-line options
def parse_options
  # Initialize with default configuration
  opts = PiOptions.new(
    {
      group_size: 2,
      block_cols: 5,
      block_rows: 5,
      grid_cols: 5,
      grid_rows: 4,
      group_spacing: 1,
      line_spacing: 0,
      col_spacing: 2,
      row_spacing: 1
    }
  )

  parser = OptionParser.new do |o|
    o.banner = "Usage: #{$PROGRAM_NAME} [options]"

    o.separator "\nDigit Grouping:"
    o.on('-g N', '--group-size N', Integer, "Digits per group (default: #{opts.group_size})") do |n|
      opts.group_size = n if n.positive?
    end

    o.separator "\nBlock Layout:"
    o.on('--bc N', '--block-cols N', Integer,
         "Groups per column in a block (default: #{opts.block_cols})") do |n|
      opts.block_cols = n if n.positive?
    end
    o.on('--br N', '--block-rows N', Integer, "Rows per block (default: #{opts.block_rows})") do |n|
      opts.block_rows = n if n.positive?
    end
    o.on('--gs N', '--group-spacing N', Integer, "Spaces between digit groups (default: #{opts.group_spacing})") do |n|
      opts.group_spacing = n if n >= 0
    end
    o.on('--ls N', '--line-spacing N', Integer, "Empty lines between rows (default: #{opts.line_spacing})") do |n|
      opts.line_spacing = n if n >= 0
    end

    o.separator "\nGrid Layout:"
    o.on('-c N', '--grid-cols N', Integer, "Block columns in grid (default: #{opts.grid_cols})") do |n|
      opts.grid_cols = n if n.positive?
    end
    o.on('-r N', '--grid-rows N', Integer, "Block rows in grid (default: #{opts.grid_rows})") do |n|
      opts.grid_rows = n if n.positive?
    end
    o.on('--cs N', '--col-spacing N', Integer, "Spaces between columns in grid (default: #{opts.col_spacing})") do |n|
      opts.col_spacing = n if n >= 0
    end
    o.on('--rs N', '--row-spacing N', Integer, "Empty lines between grid rows (default: #{opts.row_spacing})") do |n|
      opts.row_spacing = n if n >= 0
    end

    o.separator "\nHelp:"
    o.on_tail('-v', '--version', 'Show version') do
      puts "High Precision Pi version #{VERSION}"
      exit
    end
    o.on_tail('-h', '--help', 'Show this message') do
      puts o
      exit
    end
  end

  begin
    parser.parse!
  rescue OptionParser::InvalidOption => e
    puts parser.help
    warn "\nError: #{e.message}"
    exit 1
  end

  opts
end

# Main execution logic
#
# This method parses the command-line options, initializes the HighPrecisionPiFormatter
# with the parsed options, and prints the formatted value of π along with the header.
def main
  options = parse_options
  formatter = HighPrecisionPiFormatter.new(options)

  # Use the formatter to get the formatted output with header
  formatted_output = formatter.format_with_header
  if formatted_output.start_with?('Error:')
    warn formatted_output
    exit(1)
  end

  puts formatted_output
end

main if __FILE__ == $PROGRAM_NAME
