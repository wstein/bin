#!/usr/bin/env sh

set -e

. /etc/os-release
cat /etc/os-release
VERSION_ID="${VERSION_ID:-0.0}"
VERSION_MAJOR="${VERSION_ID%.*}"
VERSION_MINOR="${VERSION_ID#*.}"

test -z "${GITHUB_TOKEN}" || CURL_AUTH="Authorization: token ${GITHUB_TOKEN}"

OS_VERSION_STR="$ID | ${VERSION_ID:- - } | ${PRETTY_NAME:- - }"
echo
echo "${OS_VERSION_STR}" | tr -c '=' '='
echo
for _ in $(seq 1 8); do
	echo "${OS_VERSION_STR}"
done
echo "${OS_VERSION_STR}" | tr -c '=' '='
echo
echo

# SUDO is only set, if sudo is actually installed!
SUDO=$(command -v sudo || true)

main() {
	get_packages_to_install "$@"
	install_packages
	install_neofetch_from_sources
	install_git_extras_from_sources
	install_csvq
	install_oq
	install_yj
	install_fossil
	install_exa
	install_neovim
	install_shellcheck
	install_kitty_terminfo
	check_katacoda_and_setup_code_server
	set_max_user_watches
}

check_katacoda_and_setup_code_server() {
	if [ -d /opt/.katacodacode ]; then
		echo "Setting up code server..."

		[ -d /opt/.katacodacode/user-data/User ] || $SUDO mkdir --parents /opt/.katacodacode/user-data/User

		# (replace) vscode setting with link
		[ -f /opt/.katacodacode/user-data/User/settings.json ] && $SUDO rm /opt/.katacodacode/user-data/User/settings.json
		$SUDO wget -P /opt/.katacodacode/user-data/User https://raw.githubusercontent.com/wstein/.config/main/Code/User/settings.json

		# remove/replace incompatible extensions
		$SUDO sed -i \
			-e '/ms-vscode-remote.remote-/d' \
			-e '/adamhartford.vscode-base64/d' \
			-e '/DavidAnson.vscode-markdownlint/d' \
			-e 's/CoenraadS.bracket-pair-colorizer-2/CoenraadS.bracket-pair-colorizer/' \
			~/.config/.vscode/extensions.json
	fi
}

install_csvq() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/mithrandie/csvq/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux-amd")) | .browser_download_url'
	)

	TEMP=$(mktemp -d /tmp/csvq-XXXXXX)

	cd "${TEMP}"
	curl -L "$DL" | tar xz --strip-components=1
	$SUDO mv csvq /usr/local/bin

	cd -
	rm -rf "${TEMP}"
}

install_yj() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/sclevine/yj/releases/latest |
			jq --raw-output '.assets[] | select(.name == "yj-linux-amd64") | .browser_download_url'
	)

	sudo curl -L -o /usr/local/bin/yj $DL
	sudo chmod +x /usr/local/bin/yj
}

# install_ccat() {
# 	DL=$(
# 		curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/owenthereal/ccat/releases/latest |
# 			jq --raw-output '.assets[] | select(.name | contains("linux-amd64")) .browser_download_url'
# 	)

# 	curl -L "$DL" | $SUDO tar xz --strip-components=1 --directory /usr/local/bin
# }

install_neovim() {
	if [ "${PKG_MANAGER}" = "apk" ]; then
		# github build does not work for aline linux
		$SUDO apk --no-cache add $PACKAGES libnsl neovim
	else
		DL=$(
			curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/neovim/neovim/releases/latest |
				jq --raw-output '.assets[] | select(.name == "nvim-linux64.tar.gz") .browser_download_url'
		)

		curl -L "$DL" | $SUDO tar xz --strip-components=1 --directory /usr/local/
	fi

	# create symbolic link vim -> nvim
	$SUDO ln -fs /usr/local/bin/nvim /usr/local/bin/vim
}

install_exa() {
	if [ "${PKG_MANAGER}" = "apk" ]; then
		DL=$(
			curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/ogham/exa/releases/latest |
				jq --raw-output '.assets[] | select(.name | contains("linux-x86_64-musl-v")) .browser_download_url'
		)
	else
		DL=$(
			curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/ogham/exa/releases/latest |
				jq --raw-output '.assets[] | select(.name | contains("linux-x86_64-v")) .browser_download_url'
		)
	fi

	curl -L -o /tmp/exa.zip "$DL"
	$SUDO unzip -o -d /usr/local /tmp/exa.zip
	rm /tmp/exa.zip
}

install_sqlite() {
	if [ "${PKG_MANAGER}" = "apk" ]; then
		apk --no-cache add sqlite
	else
		DL="https://sqlite.org/$(curl -fsSL https://sqlite.org/download.html | grep -E -o "2[0-9]{3}[/]sqlite-tools-linux-x86-.*[.]zip")"
	fi

	curl -L -o /tmp/sqlite.zip $DL
	$SUDO unzip -d /usr/local/bin -j /tmp/sqlite.zip
	rm /tmp/sqlite.zip
}

install_oq() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/Blacksmoke16/oq/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux-x86_64")) .browser_download_url'
	)

	curl -fsSL $DL | $SUDO dd of=/usr/local/bin/oq
	$SUDO chmod +x /usr/local/bin/oq
}

install_fossil() {
	if [ "${PKG_MANAGER}" = "apk" ]; then
		sudo apk add fossil
	else
		URL="https://fossil-scm.org/home/uv/$(curl -fsSL https://fossil-scm.org/home/juvlist | jq --raw-output '[ .[] | select(.name | contains ("linux-x64")) | .name ] | first')"

		curl -fsSL "${URL}" | $SUDO tar -xz --directory=/usr/local/bin

		$SUDO mkdir -p /usr/local/share/zsh/site-functions/
		curl -fsSL "https://fossil-scm.org/home/raw/838a7f1b39e81ee0c06cfa959e6e97f6152019b04e10aab719c6fb118b415253?at=fossil-autocomplete.zsh" | $SUDO dd of=/usr/local/share/zsh/site-functions/_fossil
	fi
}

install_kitty_terminfo() {
	if ! [ -f "/etc/terminfo/x/xterm-kitty" ]; then
		curl -fsSL -o /tmp/xterm-kitty "https://github.com/kovidgoyal/kitty/raw/master/terminfo/x/xterm-kitty"

		test -d /etc/terminfo/x/ || $SUDO mkdir -p /etc/terminfo/x/

		$SUDO mv /tmp/xterm-kitty /etc/terminfo/x/
	fi
}

install_shellcheck() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/koalaman/shellcheck/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux.x86_64")) .browser_download_url'
	)

	TEMP=$(mktemp -d /tmp/ccat-XXXXXX)

	cd "${TEMP}"
	curl -L "$DL" | tar xJ --strip-components=1
	$SUDO mv shellcheck /usr/local/bin

	cd -
	rm -rf "${TEMP}"
}

set_max_user_watches() {
	if [ -d /etc/sysctl.d/ ]; then
		# each watch needs up to 1080 bytes (https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc)
		echo 'fs.inotify.max_user_watches=196608' | $SUDO tee /etc/sysctl.d/10_max_user_watches >/dev/null
		$SUDO sysctl -p /etc/sysctl.d/10_max_user_watches || true
	fi
}

get_packages_to_install() {
	PACKAGES="$@ bash-completion aria2 byobu bzip2 ctags curl diffutils fd-find findutils fping fzf git gnupg googler cloud-utils gzip htop iproute iptraf-ng jq libnsl lz4 lzip lzop make mc mongoose net-snmp-utils nethogs mkpasswd moreutils pass patch procps pv qrencode ripgrep rlwrap rsync ruby sshpass sl sqlite socat sudo tar tig tmux unzip util-linux virt-what wget xz zip zsh zstd"
}

install_packages() {
	# evaluates the package manager
	PKG_MANAGER_PATH=$({ command -v apk || command -v apt || command -v dnf || command -v rpm-ostree || command -v yum || command -v zypper || command -v pacman || command -v eopkg-cli; })

	# /usr/bin/dnf -> dnf
	PKG_MANAGER=${PKG_MANAGER_PATH##*/}

	case "${PKG_MANAGER}" in
	apk)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<qrencode\>/libqrencode/' -e 's/\<fd-find\>/fd/' -e 's/\<lzop\>/lzo/' -e 's/\<(iproute|googler)\>//g')
		$SUDO apk --no-cache update
		$SUDO apk --no-cache add $PACKAGES doas libffi gcompat shadow bash
		;;

	eopkg-cli)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<sqlite\>/sqlite3/' -e 's/\<iproute\>/iproute2/' -e 's/\<(pass|libnsl|googler|iptraf-ng|procps|virt-what)\>//g')
		$SUDO eopkg-cli update-repo
		$SUDO eopkg-cli -y install $PACKAGES libffi6 shadow bash
		;;

	apt)
		$SUDO sed -i '/deb cdrom:/d' /etc/apt/sources.list # remove cdrom sources
		$SUDO apt update
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<xz\>/xz-utils/' -e 's/\<(iproute|libnsl)\>//g' -e 's/\<ctags\>/universal-ctags/' -e 's/\<net-snmp-utils\>/snmp/' -e 's/\<mkpasswd\>/libstring-mkpasswd-perl/')
		$SUDO apt -y install --no-install-recommends software-properties-common
		if [ "$ID" = "ubuntu" ] && [ "$VERSION_MAJOR" -lt "18" -o "$VERSION_ID" = "18.04" ]; then
			PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<ripgrep\>//')
		fi
		$SUDO apt -y install $PACKAGES bsdmainutils apt-file sqlite3-pcre
		;;

	rpm-ostree)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<(bash|bash-completion)\>//g')
		if [ "$ID" = "fedora" ]; then
			if [ "VARIANT_ID" = "silverblue" ]; then
				$SUDO rpm-ostree install --idempotent --apply-live aria2 byobu ctags fd-find fping fzf git googler cloud-utils htop iptraf-ng jq lz4 lzip lzop mc mongoose nethogs net-snmp-utils mkpasswd moreutils pass patch pv qrencode ripgrep rlwrap ruby sl sqlite socat tig tmux virt-what zsh zstd doas
			else
				$SUDO rpm-ostree install --idempotent --apply-live aria2 byobu ctags fd-find fping fzf git googler cloud-utils htop iptraf-ng libnsl lz4 lzip lzop make mkpasswd mongoose man-db man-pages nethogs moreutils pass patch pv qrencode ripgrep rlwrap ruby sshpass sl socat sqlite tig tmux unzip virt-what wget zip zsh zstd doas
			fi
		else
			$SUDO rpm-ostree install ---idempotent --apply-live aria2 byobu ctags fd-find fping fzf git googler cloud-utils htop iptraf-ng jq libnsl lz4 lzip lzop make mkpasswd man-db man-pages mongoose nethogs moreutils pass patch pv qrencode ripgrep rlwrap ruby sshpass sl socat sqlite tig tmux unzip virt-what wget zip zsh zstd
		fi
		;;

	dnf | yum | rpm-ostree)
		if [ "$ID" = "fedora" ]; then
			$SUDO $PKG_MANAGER -y install $PACKAGES $PKG_MANAGER-plugins-core doas openssh-server kitty-terminfo
		elif [ "$ID" = "almalinux" ] || [ "$ID" = "centos" ] || [ "$ID" = "ol" ] || [ "$ID" = "rhel" ] || [ "$ID" = "rocky" ]; then
			$SUDO $PKG_MANAGER -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION_MAJOR}.noarch.rpm
			PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<(fd-find|cloud-utils|ripgrep|fzf|moreutils|mongoose|mkpasswd)\>//g')
			$SUDO $PKG_MANAGER -y install $PACKAGES $PKG_MANAGER-plugins-core openssh-server
			install_fzf_from_github
		elif [ "$ID" = "photon" ]; then
			PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<(ripgrep|procps|sl|qrencode|htop|bash-completion)\>//g')
			$SUDO $PKG_MANAGER -y install $PACKAGES $PKG_MANAGER-plugins-core vim openssh-server
		else
			$SUDO $PKG_MANAGER -y install $PACKAGES $PKG_MANAGER-plugins-core vim openssh-server
		fi
		;;

	pacman)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<(virt-what|googler)\>//g')
		$SUDO pacman -Sy --noconfirm $PACKAGES vim
		;;

	zypper)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<pass\>/password-store/' -e 's/\<(libnsl)\>//g' -e 's/\<(gnupg)\>/gnupg dirmngr/g')
		$SUDO zypper install -y $PACKAGES vim
		;;

	*)
		echo "Fatal Error: No supported package manager found!"
		exit 1
		;;

	esac
}

install_git_extras_from_sources() {
	TEMP_DIR=$(mktemp -d /tmp/git-extras.XXXXXX)
	git clone https://github.com/tj/git-extras.git $TEMP_DIR
	cd $TEMP_DIR
	# checkout the latest tag
	git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
	$SUDO make install
	cd ~
	rm -rf $TEMP_DIR
}

install_neofetch_from_sources() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" -H "${CURL_AUTH}" https://api.github.com/repos/dylanaraps/neofetch/releases/latest |
			jq --raw-output '.tarball_url'
	)

	TEMP_DIR=$(mktemp -d /tmp/neofetch-XXXXXX)
	mkdir --parents "${TEMP_DIR}"

	curl -L "$DL" | tar xz --strip-components=1 --directory "${TEMP_DIR}"

	cd "${TEMP_DIR}"
	$SUDO make install PREFIX=/usr/local MANDIR=/usr/local/man
	cd ~
	rm -rf $TEMP_DIR
}

install_fzf_from_github() {
	curl -L "https://raw.githubusercontent.com/junegunn/fzf/master/install" | bash
}

main "$@"
