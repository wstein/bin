#!/usr/bin/env sh

set -eu

. /etc/os-release
cat /etc/*release
VERSION_ID="${VERSION_ID:-0.0}"
VERSION_MAJOR="${VERSION_ID%.*}"
VERSION_MINOR="${VERSION_ID#*.}"

OS_VERSION_STR="$ID | ${VERSION_ID:- - } | ${PRETTY_NAME:- - }"
echo
echo "${OS_VERSION_STR}" | tr '[:print:]' '='
for n in $(seq 1 8); do
	echo "${OS_VERSION_STR}"
done
echo "${OS_VERSION_STR}" | tr '[:print:]' '='
echo

# SUDO is only set, if sudo is actually installed!
SUDO=$(command -v sudo || true)

main() {
	get_packages_to_install "$@"
	install_packages
	install_neofetch_from_sources
	install_git_extras_from_sources
	install_csvq
	install_oq
	install_ccat
	install_neovim
	install_shellcheck
	set_max_user_watches
}

install_csvq() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/mithrandie/csvq/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux-amd")) .browser_download_url'
	)

	TEMP=$(mktemp -d /tmp/ccat-XXXXXX)

	cd "${TEMP}"
	curl -L $DL | tar xz --strip-components=1
	$SUDO mv csvq /usr/local/bin

	cd -
	rm -rf "${TEMP}"
}

install_ccat() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/owenthereal/ccat/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux-amd64")) .browser_download_url'
	)

	curl -L $DL | $SUDO tar xz --strip-components=1 --directory /usr/local/bin
}

install_neovim() {
	if [ "${PKG_MANAGER}" = "apk" ]; then
		# github build does not work for aline linux
		$SUDO apk add $PACKAGES libnsl neovim
	else
		DL=$(
			curl -fsSL -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/neovim/neovim/releases/latest |
				jq --raw-output '.assets[] | select(.name | contains("linux64")) .browser_download_url'
		)

		curl -L $DL | $SUDO tar xz --strip-components=1 --directory /usr/local/
	fi

	# download plug plugin
	$SUDO mkdir /usr/local/share/nvim/site/autoload/
	$SUDO curl -fL -o /usr/local/share/nvim/site/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	# create symbolic link vim -> nvim
	test -f /usr/local/bin/vim && $SUDO rm /usr/local/bin/vim
	$SUDO ln -s $(command -v nvim) /usr/local/bin/vim
}

install_oq() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/Blacksmoke16/oq/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux-x86_64")) .browser_download_url'
	)

	curl -L $DL | $SUDO dd of=/usr/local/bin/oq
	$SUDO chmod +x /usr/local/bin/oq
}

install_shellcheck() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/koalaman/shellcheck/releases/latest |
			jq --raw-output '.assets[] | select(.name | contains("linux.x86_64")) .browser_download_url'
	)

	TEMP=$(mktemp -d /tmp/ccat-XXXXXX)

	cd "${TEMP}"
	curl -L $DL | tar xJ --strip-components=1
	$SUDO mv shellcheck /usr/local/bin

	cd -
	rm -rf "${TEMP}"
}

set_max_user_watches() {
	if [ -d /etc/sysctl.d/ ]; then
		# each watch needs up to 1080 bytes (https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc)
		echo 'fs.inotify.max_user_watches=196608' | $SUDO tee /etc/sysctl.d/10_max_user_watches >/dev/null
		$SUDO sysctl -p || true # ignore error
	fi
}

get_packages_to_install() {
	PACKAGES="$@ bash bash-completion bzip2 curl diffutils findutils git gnupg gzip htop iproute jq libnsl make pass patch procps qrencode ripgrep rsync ruby sl sqlite sudo tar tmux util-linux virt-what wget xz zsh zstd"
}

install_packages() {
	# evaluates the package manager
	PKG_MANAGER_PATH=$({ command -v apk || command -v apt || command -v dnf || command -v yum || command -v zypper || command -v pacman; })

	# /usr/bin/dnf -> dnf
	PKG_MANAGER=${PKG_MANAGER_PATH##*/}

	case "${PKG_MANAGER}" in
	apk)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<qrencode\>/libqrencode/' -e 's/\<iproute\>//')
		$SUDO apk update
		$SUDO apk add $PACKAGES libffi exa
		;;

	apt)
		$SUDO apt update
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<xz\>/xz-utils/' -e 's/\<iproute\>//' -e 's/\<libnsl\>//')
		$SUDO apt -y install --no-install-recommends software-properties-common
		if [ "$ID" = "ubuntu" ] && [ "$VERSION_MAJOR" -lt "18" -o "$VERSION_ID" = "18.04" ]; then
			PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<ripgrep\>//')
			$SUDO apt -y install $PACKAGES bsdmainutils apt-file
		elif [ "$ID" = "ubuntu" ] && [ "$VERSION_MAJOR" -lt "20" -o "$VERSION_ID" = "20.04" ]; then
			$SUDO apt -y install $PACKAGES bsdmainutils apt-file
		else
			$SUDO apt -y install $PACKAGES bsdmainutils exa apt-file
		fi
		;;

	dnf | yum)
		if [ "$ID" = "fedora" ]; then
			$SUDO $PKG_MANAGER -y install $PACKAGES neovim exa dnf-plugins-core openssh-server
		elif [ "$ID" = "almalinux" ] || [ "$ID" = "centos" ] || [ "$ID" = "rhel" ]; then
			$SUDO $PKG_MANAGER -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION_MAJOR}.noarch.rpm
			PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<ripgrep\>//g')
			$SUDO $PKG_MANAGER -y install $PACKAGES neovim openssh-server
		elif [ "$ID" = "photon" ]; then
			PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<ripgrep\>|\<procps\>|\<sl\>|\<qrencode\>|\<htop\>|\<bash-completion\>//g')
			$SUDO $PKG_MANAGER -y install $PACKAGES vim openssh-server
		else
			$SUDO $PKG_MANAGER -y install $PACKAGES vim openssh-server
		fi
		;;

	pacman)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<virt-what\>//')
		$SUDO pacman -Sy --noconfirm $PACKAGES vim
		;;

	zypper)
		PACKAGES=$(echo $PACKAGES | sed -r -e 's/\<pass\>/password-store/' -e 's/\<libnsl\>//')
			$SUDO zypper install -y $PACKAGES vim
		;;

	*)
		echo "Fatal Error: No supported package manager found!"
		exit 1
		;;

	esac
}

install_git_extras_from_sources() {
	TEMP_DIR=$(mktemp -d /tmp/git-extras.XXXXXX)
	git clone https://github.com/tj/git-extras.git $TEMP_DIR
	cd $TEMP_DIR
	# checkout the latest tag
	git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
	$SUDO make install
	cd ~
	rm -rf $TEMP_DIR
}

install_neofetch_from_sources() {
	DL=$(
		curl -fsSL -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/dylanaraps/neofetch/releases/latest |
			jq --raw-output '.tarball_url'
	)

	TEMP_DIR=$(mktemp -d /tmp/neofetch-XXXXXX)
	mkdir --parents "${TEMP_DIR}"

	curl -L $DL | tar xz --strip-components=1 --directory "${TEMP_DIR}"

	cd "${TEMP_DIR}"
	$SUDO make install
	cd ~
	rm -rf $TEMP_DIR
}

main "$@"
