#!/usr/bin/awk -f

# Usage: ./get-minimal-packages [distro] [version]
# Prints a space-separated list of packages for the given distro and version (default: fedora)
# Always reads from $HOME/bin/minimal-packages.md

function trim(s) { sub(/^[ \t]+/, "", s); sub(/[ \t]+$/, "", s); return s }

BEGIN {
    distro = (ARGC > 1) ? ARGV[1] : "fedora"
    version = (ARGC > 2) ? ARGV[2] : ""
    distro_lc = tolower(distro)
    version_lc = tolower(version)
    dv_key = (version_lc != "") ? distro_lc "@" version_lc : distro_lc
    for (i = 1; i < ARGC; i++) delete ARGV[i]
    input_file = ENVIRON["HOME"] "/bin/minimal-packages.md"
    ARGV[1] = input_file
    ARGC = 2
    fedora_col = target_col = -1
    pkgs = ""
    header_seen = 0
    rule_count = 0
}

/^[-= |]+$/ { next }

/^[|]/ && !header_seen {
    header_seen = 1
    line = $0
    sub(/^\|\s*/, "", line)
    nfields = split(line, fields, "|")
    for (i = 1; i <= nfields; i++) {
        col = trim(tolower(fields[i]))
        if (col == "fedora") fedora_col = i
        if (col == distro_lc) target_col = i
    }
    next
}

/^[|][^|]/ {
    line = $0
    sub(/^[|][ ]*/, "", line)
    split(line, fields, "|")
    col_idx = (target_col > 0) ? target_col : fedora_col
    fedora_val = (fedora_col > 0) ? trim(fields[fedora_col]) : ""
    pkg = (col_idx > 0) ? trim(fields[col_idx]) : ""
    if (pkg == "") pkg = fedora_val
    if (pkg != "" && pkg != "n/a" && pkg != "*" && pkg != distro && pkg != "fedora") {
        pkgs = pkgs ? pkgs " " pkg : pkg
    }
}

/^[ \t]*- +[a-zA-Z0-9_-]+:[0-9.]+/ {
    rule_lines[++rule_count] = $0
}

END {
    delete disables; delete renames; delete adds;
    for (ri = 1; ri <= rule_count; ri++) {
        line = rule_lines[ri]
        sub(/^[ \t]*-[ \t]+/, "", line)
        key_end_pos = match(line, /[ \t]+/)
        if (key_end_pos == 0) continue
        rule_key_part = substr(line, 1, key_end_pos - 1)
        rule_content = substr(line, key_end_pos + RLENGTH)
        sub(/^[ \t]+/, "", rule_content)
        if (match(rule_key_part, /:/)) {
             distro_version_split_pos = RSTART
             rule_distro = tolower(substr(rule_key_part, 1, distro_version_split_pos - 1))
             rule_version = substr(rule_key_part, distro_version_split_pos + 1)
             current_rule_key = rule_distro "@" rule_version
             if (current_rule_key == dv_key) {
                 gsub(/[ \t]+/, " ", rule_content)
                 n_rule_parts = split(rule_content, rule_parts, " ")
                 for (j = 1; j <= n_rule_parts; j++) {
                     part = rule_parts[j]
                     if (substr(part, 1, 1) == "-") {
                         disables[tolower(substr(part, 2))] = 1
                     } else if (index(part, "=>")) {
                         split(part, ren, /=>/)
                         ren_from = tolower(trim(ren[1]))
                         ren_to = tolower(trim(ren[2]))
                         renames[ren_from] = ren_to
                     } else if (substr(part, 1, 1) == "+") {
                         adds[tolower(substr(part, 2))] = 1
                     }
                 }
             }
        }
    }
    npkgs = split(pkgs, pkgarr, " ")
    delete out_pkgs_map
    for (i = 1; i <= npkgs; i++) {
        p = tolower(pkgarr[i])
        if (p in renames) p = renames[p]
        if (p in disables) continue
        out_pkgs_map[p] = 1
    }
    for (a in adds) {
        out_pkgs_map[a] = 1
    }
    final_pkgs_str = ""
    for (p in out_pkgs_map) {
        final_pkgs_str = (final_pkgs_str == "") ? p : final_pkgs_str " " p
    }
    cmd = "tr ' ' '\\n' | sort | tr '\\n' ' '"
    print final_pkgs_str | cmd
    close(cmd)
}
